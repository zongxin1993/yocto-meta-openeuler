From 14ebb40b3a542a19d339ac2b93c5ebccd8a5a00e Mon Sep 17 00:00:00 2001
From: hmilylmk <liumingkai@huawei.com>
Date: Tue, 14 Mar 2023 19:36:08 +0800
Subject: [PATCH] add bluez adapter for dsoftbus

Signed-off-by: hmilylmk <liumingkai@huawei.com>
---
 BUILD.gn                             |  20 ++
 bluez_adapter/bluez_adapter.c        | 434 +++++++++++++++++++++++++++
 bluez_adapter/include/ohos_bt_def.h  |  26 ++
 bluez_adapter/include/ohos_bt_gap.h  |  44 +++
 bluez_adapter/include/ohos_bt_gatt.h | 153 ++++++++++
 5 files changed, 677 insertions(+)
 create mode 100644 bluez_adapter/bluez_adapter.c
 create mode 100644 bluez_adapter/include/ohos_bt_def.h
 create mode 100644 bluez_adapter/include/ohos_bt_gap.h
 create mode 100644 bluez_adapter/include/ohos_bt_gatt.h

diff --git a/BUILD.gn b/BUILD.gn
index 14a5b0e..e155dfa 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -57,3 +57,23 @@ ohos_shared_library("syspara") {
     "//third_party/mbedtls:mbedtls_shared",
   ]
 }
+
+config("bluez_adapter_config") {
+  include_dirs = [
+    "bluez_adapter/include",
+  ]
+}
+
+ohos_shared_library("bluez_adapter") {
+  include_dirs = [
+    "bluez_adapter/include",
+  ]
+  sources = [
+    "bluez_adapter/bluez_adapter.c",
+  ]
+  public_configs = [ ":bluez_adapter_config" ]
+  deps = [
+    "//third_party/bounds_checking_function:libsec_shared",
+  ]
+  libs = [ "bluetooth" ]
+}
diff --git a/bluez_adapter/bluez_adapter.c b/bluez_adapter/bluez_adapter.c
new file mode 100644
index 0000000..5273139
--- /dev/null
+++ b/bluez_adapter/bluez_adapter.c
@@ -0,0 +1,434 @@
+#include <errno.h>
+#include <pthread.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <unistd.h>
+
+#include "bluetooth/bluetooth.h"
+#include "bluetooth/hci.h"
+#include "bluetooth/hci_lib.h"
+#include "ohos_bt_gap.h"
+#include "ohos_bt_gatt.h"
+
+#define INSTANCE_MAX 2
+#define MAX_ADV_DATA_LEN 31
+#define SCAN_WINDOW 10
+#define SCAN_INTERVAL 10
+
+static int g_instance_arr[INSTANCE_MAX] = {0};
+
+static int g_dev_id = 0;
+
+static StartAdvRawData g_advData[INSTANCE_MAX];
+
+static bdaddr_t g_bdaddr[INSTANCE_MAX];
+
+static ScanResultCallback g_resultCallback = NULL;
+
+volatile bool g_isAdvertising = false;
+
+volatile bool g_isScanning = false;
+
+static bool g_isRandomAddr = false;
+
+static int g_scan_dd = 0;
+
+static int g_adv_dd = 0;
+
+static pthread_t g_scan_id = -1;
+
+static pthread_t g_adv_id = -1;
+
+void scanResultFunc(void *arg) {
+    unsigned char buf[HCI_MAX_EVENT_SIZE], *ptr;
+    struct hci_filter nf, of;
+    socklen_t olen;
+    int len;
+
+    olen = sizeof(of);
+    if (getsockopt(g_scan_dd, SOL_HCI, HCI_FILTER, &of, &olen) < 0) {
+        printf("Could not get socket options\n");
+    }
+
+    hci_filter_clear(&nf);
+    hci_filter_set_ptype(HCI_EVENT_PKT, &nf);
+    hci_filter_set_event(EVT_LE_META_EVENT, &nf);
+
+    if (setsockopt(g_scan_dd, SOL_HCI, HCI_FILTER, &nf, sizeof(nf)) < 0) {
+        printf("Could not set socket options\n");
+    }
+
+    while (g_isScanning) {
+        evt_le_meta_event *meta;
+        le_advertising_info *info;
+
+        while ((len = read(g_scan_dd, buf, sizeof(buf))) < 0) {
+            if (errno == EAGAIN || errno == EINTR) continue;
+            goto done;
+        }
+
+        ptr = buf + (1 + HCI_EVENT_HDR_SIZE);
+        len -= (1 + HCI_EVENT_HDR_SIZE);
+
+        meta = (void *)ptr;
+
+        if (meta->subevent != 0x02) goto done;
+
+        /* Ignoring multiple reports */
+        info = (le_advertising_info *)(meta->data + 1);
+        BtScanResultData scanResult;
+        scanResult.eventType = OHOS_BLE_EVT_LEGACY_CONNECTABLE;
+        scanResult.dataStatus = OHOS_BLE_DATA_COMPLETE;
+        scanResult.addrType = OHOS_BLE_RANDOM_DEVICE_ADDRESS;
+        scanResult.primaryPhy = OHOS_BLE_SCAN_PHY_1M;
+        scanResult.secondaryPhy = OHOS_BLE_SCAN_PHY_1M;
+        scanResult.advSid = 1;
+        scanResult.txPower = 1;
+        scanResult.rssi = 0xE0;
+        scanResult.directAddrType = OHOS_BLE_RANDOM_DEVICE_ADDRESS;
+        memcpy(scanResult.addr.addr, info->bdaddr.b, 6);
+        scanResult.advData = info->data;
+        scanResult.advLen = info->length;
+        if (g_resultCallback != NULL)
+            g_resultCallback(&scanResult);
+    }
+done:
+    setsockopt(g_scan_dd, SOL_HCI, HCI_FILTER, &of, sizeof(of));
+    hci_close_dev(g_scan_dd);
+}
+
+int BleStartScan(void) {
+    int err;
+    uint8_t own_type = LE_PUBLIC_ADDRESS;
+    uint8_t scan_type = OHOS_BLE_SCAN_TYPE_ACTIVE;
+    uint8_t filter_policy = OHOS_BLE_ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY;
+    uint16_t interval = htobs(SCAN_INTERVAL);
+    uint16_t window = htobs(SCAN_WINDOW);
+    uint8_t filter_dup = 0x01;
+    g_scan_dd = hci_open_dev(g_dev_id);
+    if (g_scan_dd < 0) {
+        perror("Could not open device");
+        return -1;
+    }
+
+    err = hci_le_set_scan_parameters(g_scan_dd, scan_type, interval, window,
+                                     own_type, filter_policy, 10000);
+    if (err < 0) {
+        perror("Set scan parameters failed");
+        hci_close_dev(g_scan_dd);
+        return -1;
+    }
+
+    err = hci_le_set_scan_enable(g_scan_dd, 0x01, filter_dup, 10000);
+    if (err < 0) {
+        perror("Enable scan failed");
+        hci_close_dev(g_scan_dd);
+        return -1;
+    }
+
+    g_isScanning = true;
+    err = pthread_create(&g_scan_id, NULL, (void *)&scanResultFunc, NULL);
+    if (err < 0) {
+        perror("pthread_create failed");
+        hci_close_dev(g_scan_dd);
+        return -1;
+    }
+    return 0;
+}
+
+int hci_le_set_adv_parameters(int dd, uint16_t min_interval,
+                              uint16_t max_interval, uint8_t advtype,
+                              uint8_t chan_map, uint8_t filter, int to) {
+    struct hci_request rq;
+    le_set_advertising_parameters_cp adv_params_cp;
+    uint8_t status;
+
+    memset(&adv_params_cp, 0, sizeof(adv_params_cp));
+    adv_params_cp.min_interval = min_interval;
+    adv_params_cp.max_interval = max_interval;
+    adv_params_cp.advtype = advtype;
+    adv_params_cp.own_bdaddr_type = LE_RANDOM_ADDRESS;
+    adv_params_cp.chan_map = 7;
+
+    memset(&rq, 0, sizeof(rq));
+    rq.ogf = OGF_LE_CTL;
+    rq.ocf = OCF_LE_SET_ADVERTISING_PARAMETERS;
+    rq.cparam = &adv_params_cp;
+    rq.clen = LE_SET_ADVERTISING_PARAMETERS_CP_SIZE;
+    rq.rparam = &status;
+    rq.rlen = 1;
+
+    if (hci_send_req(dd, &rq, to) < 0) return -1;
+
+    if (status) {
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
+int get_instance_index() {
+    for (int i = 0; i < INSTANCE_MAX; ++i) {
+        if (g_instance_arr[i] == 0) {
+            g_instance_arr[i] = 1;
+            return i;
+        }
+    }
+    return -1;
+}
+
+int hci_le_set_adv_data(int dd, unsigned char *data, unsigned int dataLen,
+                        int to) {
+    struct hci_request rq;
+    le_set_advertising_data_cp adv_data_cp;
+    uint8_t status;
+
+    memset(&adv_data_cp, 0, sizeof(adv_data_cp));
+    memcpy(adv_data_cp.data, data, dataLen);
+    adv_data_cp.length = dataLen;
+
+    memset(&rq, 0, sizeof(rq));
+    rq.ogf = OGF_LE_CTL;
+    rq.ocf = OCF_LE_SET_ADVERTISING_DATA;
+    rq.cparam = &adv_data_cp;
+    rq.clen = LE_SET_ADVERTISING_DATA_CP_SIZE;
+    rq.rparam = &status;
+    rq.rlen = 1;
+
+    if (hci_send_req(dd, &rq, to) < 0) return -1;
+
+    if (status) {
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
+int hci_le_set_adv_rsp_data(int dd, unsigned char *rspData,
+                            unsigned int dataLen, int to) {
+    struct hci_request rq;
+    le_set_scan_response_data_cp adv_rspdata_cp;
+    uint8_t status;
+
+    memset(&adv_rspdata_cp, 0, sizeof(adv_rspdata_cp));
+    memcpy(adv_rspdata_cp.data, rspData, dataLen);
+    adv_rspdata_cp.length = dataLen;
+
+    memset(&rq, 0, sizeof(rq));
+    rq.ogf = OGF_LE_CTL;
+    rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
+    rq.cparam = &adv_rspdata_cp;
+    rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
+    rq.rparam = &status;
+    rq.rlen = 1;
+
+    if (hci_send_req(dd, &rq, to) < 0) return -1;
+
+    if (status) {
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
+int hci_le_set_random_addr(int dd, bdaddr_t addr, int to) {
+    struct hci_request rq;
+    le_set_random_address_cp cp;
+    uint8_t status;
+
+    memset(&cp, 0, sizeof(cp));
+    cp.bdaddr = addr;
+
+    memset(&rq, 0, sizeof(rq));
+    rq.ogf = OGF_LE_CTL;
+    rq.ocf = OCF_LE_SET_RANDOM_ADDRESS;
+    rq.cparam = &cp;
+    rq.clen = LE_SET_RANDOM_ADDRESS_CP_SIZE;
+    rq.rparam = &status;
+    rq.rlen = 1;
+
+    if (hci_send_req(dd, &rq, to) < 0) return -1;
+
+    if (status) {
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
+void advFunc(void *arg) {
+    while (g_isAdvertising) {
+        for (int i = 0; i < INSTANCE_MAX; ++i) {
+            if (g_instance_arr[i] == 1) {
+                hci_le_set_adv_data(g_adv_dd, g_advData[i].advData,
+                                    g_advData[i].advDataLen, 10000);
+                hci_le_set_adv_rsp_data(g_adv_dd, g_advData[i].rspData,
+                                        g_advData[i].rspDataLen, 10000);
+                hci_le_set_random_addr(g_adv_dd, g_bdaddr[i], 10000);
+            }
+            sleep(1);
+        }
+    }
+}
+
+void initRandomAddr() {
+    srand((unsigned)time(NULL));
+    for (int i = 0; i < INSTANCE_MAX; ++i) {
+        g_bdaddr[i].b[0] = rand() % 32;
+        for (int j = 1; j < 6; ++j) {
+            g_bdaddr[i].b[j] = rand() % 128;
+        }
+    }
+    g_isRandomAddr = true;
+}
+
+int BleStartAdvEx(int *advId, const StartAdvRawData rawData,
+                  BleAdvParams advParam) {
+    int err, instance;
+
+    g_adv_dd = hci_open_dev(g_dev_id);
+    if (g_adv_dd < 0) {
+        perror("Could not open device");
+        return -1;
+    }
+
+    if (!g_isAdvertising) {
+        err = hci_le_set_adv_parameters(g_adv_dd, advParam.minInterval,
+                                        advParam.maxInterval, advParam.advType,
+                                        advParam.channelMap,
+                                        advParam.advFilterPolicy, 10000);
+        if (err < 0) {
+            perror("Set Adv Parameters failed");
+            hci_close_dev(g_adv_dd);
+            return -1;
+        }
+        err = hci_le_set_advertise_enable(g_adv_dd, 0x01, 10000);
+        if (err < 0) {
+            perror("Enable adv failed");
+            hci_close_dev(g_adv_dd);
+            return -1;
+        }
+        g_isAdvertising = true;
+    }
+
+    instance = get_instance_index();
+    if (g_advData[instance].advData == NULL)
+        g_advData[instance].advData =
+            (unsigned char *)malloc(sizeof(unsigned char) * MAX_ADV_DATA_LEN);
+    if (g_advData[instance].rspData == NULL)
+        g_advData[instance].rspData =
+            (unsigned char *)malloc(sizeof(unsigned char) * MAX_ADV_DATA_LEN);
+
+    memcpy(g_advData[instance].advData, rawData.advData, rawData.advDataLen);
+    memcpy(g_advData[instance].rspData, rawData.rspData, rawData.rspDataLen);
+    g_advData[instance].advDataLen = rawData.advDataLen;
+    g_advData[instance].rspDataLen = rawData.rspDataLen;
+    if (!g_isRandomAddr) 
+        initRandomAddr();
+
+    if (g_adv_id == -1) {
+        err = pthread_create(&g_adv_id, NULL, (void *)&advFunc, NULL);
+        if (err < 0) {
+            perror("pthread_create failed");
+            hci_close_dev(g_adv_dd);
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
+int BleGattRegisterCallbacks(BtGattCallbacks *func) {
+    if (func == NULL || func->scanResultCb == NULL) {
+        perror("RegisterResultCb failed");
+        return -1;
+    }
+    g_resultCallback = func->scanResultCb;
+    return 0;
+}
+
+int BleStopAdv(int advId) {
+    int dd, err;
+
+    dd = hci_open_dev(g_dev_id);
+    if (dd < 0) {
+        perror("Could not open device");
+        return -1;
+    }
+    err = hci_le_set_advertise_enable(dd, 0x00, 10000);
+    if (err < 0) {
+        perror("Disable adv failed");
+        hci_close_dev(dd);
+        return -1;
+    }
+    g_isAdvertising = false;
+    hci_close_dev(dd);
+    return 0;
+}
+
+int BleStopScan(void) {
+    int dd, err;
+    uint8_t filter_dup = 0x01;
+    dd = hci_open_dev(g_dev_id);
+    if (dd < 0) {
+        perror("Could not open device");
+        return -1;
+    }
+    err = hci_le_set_scan_enable(dd, 0x00, filter_dup, 10000);
+    if (err < 0) {
+        perror("Disable scan failed");
+        hci_close_dev(dd);
+        return -1;
+    }
+    g_isScanning = false;
+    hci_close_dev(dd);
+    return 0;
+}
+
+bool GetLocalAddr(unsigned char *mac, unsigned int len) {
+    int dd, err;
+    dd = hci_open_dev(g_dev_id);
+    if (dd < 0) {
+        perror("Could not open device");
+        return false;
+    }
+    bdaddr_t bdaddr;
+    err = hci_read_bd_addr(dd, &bdaddr, 10000);
+    if (err < 0) {
+        perror("Disable scan failed");
+        hci_close_dev(dd);
+        return false;
+    }
+    memcpy(mac, bdaddr.b, len);
+    hci_close_dev(dd);
+    return true;
+}
+
+bool EnableBle(void) {
+    return true;
+}
+
+bool DisableBle(void) {
+    return true;
+}
+
+bool SetLocalName(unsigned char *localName, unsigned char length) {
+    return true;
+}
+
+bool PairRequestReply(const BdAddr *bdAddr, int transport, bool accept) {
+    return true;
+}
+
+bool SetDevicePairingConfirmation(const BdAddr *bdAddr, int transport,
+                                  bool accept) {
+    return true;
+}
+
+bool IsBleEnabled() {
+    return true;
+}
+
+int GapRegisterCallbacks(BtGapCallBacks *func) {
+    return 0;
+}
diff --git a/bluez_adapter/include/ohos_bt_def.h b/bluez_adapter/include/ohos_bt_def.h
new file mode 100644
index 0000000..d645c41
--- /dev/null
+++ b/bluez_adapter/include/ohos_bt_def.h
@@ -0,0 +1,26 @@
+#ifndef OHOS_BT_DEF_H
+#define OHOS_BT_DEF_H
+
+#define OHOS_BD_ADDR_LEN 6
+
+typedef struct {
+    unsigned char addr[OHOS_BD_ADDR_LEN];
+} BdAddr;
+
+typedef enum {
+    OHOS_BT_STATUS_SUCCESS = 0x00,
+    OHOS_BT_STATUS_FAIL,
+    OHOS_BT_STATUS_NOT_READY,
+    OHOS_BT_STATUS_NOMEM,
+    OHOS_BT_STATUS_BUSY,
+    OHOS_BT_STATUS_DONE,
+    OHOS_BT_STATUS_UNSUPPORTED,
+    OHOS_BT_STATUS_PARM_INVALID,
+    OHOS_BT_STATUS_UNHANDLED,
+    OHOS_BT_STATUS_AUTH_FAILURE,
+    OHOS_BT_STATUS_RMT_DEV_DOWN,
+    OHOS_BT_STATUS_AUTH_REJECTED
+} BtStatus;
+
+
+#endif
diff --git a/bluez_adapter/include/ohos_bt_gap.h b/bluez_adapter/include/ohos_bt_gap.h
new file mode 100644
index 0000000..b9e39ff
--- /dev/null
+++ b/bluez_adapter/include/ohos_bt_gap.h
@@ -0,0 +1,44 @@
+#ifndef OHOS_BT_GAP_H
+#define OHOS_BT_GAP_H
+
+#include "ohos_bt_def.h"
+#include <stdbool.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define OHOS_BD_NAME_LEN 32
+
+bool EnableBle(void);
+
+bool DisableBle(void);
+bool IsBleEnabled();
+bool GetLocalAddr(unsigned char *mac, unsigned int len);
+bool SetLocalName(unsigned char *localName, unsigned char length);
+bool SetDevicePairingConfirmation(const BdAddr *bdAddr, int transport, bool accept);
+bool PairRequestReply(const BdAddr *bdAddr, int transport, bool accept);
+
+typedef enum { 
+    OHOS_GAP_STATE_TURNING_ON = 0x0,
+    OHOS_GAP_STATE_TURN_ON,
+    OHOS_GAP_STATE_TURNING_OFF,
+    OHOS_GAP_STATE_TURN_OFF
+} BtStackState;
+
+typedef void (*GapPairRequestedCallback)(const BdAddr *bdAddr, int transport);
+typedef void (*GapPairConfirmedCallback)(const BdAddr *bdAddr, int transport, int reqType, int number);
+typedef void (*GapStateChangedCallback)(const int transport, const int status);
+
+typedef struct {
+    GapStateChangedCallback stateChangeCallback;
+    GapPairRequestedCallback pairRequestedCallback;
+    GapPairConfirmedCallback pairConfiremedCallback;
+} BtGapCallBacks;
+
+int GapRegisterCallbacks(BtGapCallBacks *func);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
diff --git a/bluez_adapter/include/ohos_bt_gatt.h b/bluez_adapter/include/ohos_bt_gatt.h
new file mode 100644
index 0000000..b91af26
--- /dev/null
+++ b/bluez_adapter/include/ohos_bt_gatt.h
@@ -0,0 +1,153 @@
+#ifndef OHOS_BT_GATT_H
+#define OHOS_BT_GATT_H
+
+#include <stdbool.h>
+#include "ohos_bt_def.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+typedef enum {
+    OHOS_BLE_ADV_FILTER_ALLOW_SCAN_ANY_CON_ANY = 0x00,
+    OHOS_BLE_ADV_FILTER_ALLOW_SCAN_WLST_CON_ANY = 0x01,
+    OHOS_BLE_ADV_FILTER_ALLOW_SCAN_ANY_CON_WLST = 0x02,
+    OHOS_BLE_ADV_FILTER_ALLOW_SCAN_WLST_CON_WLST = 0x03,
+} BleAdvFilter;
+
+typedef enum {
+    OHOS_BLE_ADV_IND = 0x00,
+    OHOS_BLE_ADV_DIRECT_IND_HIGH = 0x01,
+    OHOS_BLE_ADV_SCAN_IND = 0x02,
+    OHOS_BLE_ADV_NONCONN_IND = 0x03,
+    OHOS_BLE_ADV_DIRECT_IND_LOW  = 0x04,
+} BleAdvType;
+
+typedef enum {
+    OHOS_BLE_SCAN_TYPE_PASSIVE = 0x00,
+    OHOS_BLE_SCAN_TYPE_ACTIVE,
+} BleScanType;
+
+typedef enum {
+    OHOS_BLE_SCAN_FILTER_POLICY_ACCEPT_ALL = 0x00,
+    OHOS_BLE_SCAN_FILTER_POLICY_ONLY_WHITE_LIST,
+    OHOS_BLE_SCAN_FILTER_POLICY_ACCEPT_ALL_AND_RPA,
+    OHOS_BLE_SCAN_FILTER_POLICY_ONLY_WHITE_LIST_AND_RPA
+} BleScanFilterPolicy;
+
+typedef enum {
+    OHOS_BLE_EVT_NON_CONNECTABLE_NON_SCANNABLE = 0x00,
+    OHOS_BLE_EVT_NON_CONNECTABLE_NON_SCANNABLE_DIRECTED = 0x04,
+    OHOS_BLE_EVT_CONNECTABLE = 0x01,
+    OHOS_BLE_EVT_CONNECTABLE_DIRECTED = 0x05,
+    OHOS_BLE_EVT_SCANNABLE = 0x02,
+    OHOS_BLE_EVT_SCANNABLE_DIRECTED = 0x06,
+    OHOS_BLE_EVT_LEGACY_NON_CONNECTABLE = 0x10,
+    OHOS_BLE_EVT_LEGACY_SCANNABLE = 0x12,
+    OHOS_BLE_EVT_LEGACY_CONNECTABLE = 0x13,
+    OHOS_BLE_EVT_LEGACY_CONNECTABLE_DIRECTED = 0x15,
+    OHOS_BLE_EVT_LEGACY_SCAN_RSP_TO_ADV_SCAN = 0x1A,
+    OHOS_BLE_EVT_LEGACY_SCAN_RSP_TO_ADV = 0x1B
+} BleScanResultEvtType;
+
+typedef enum {
+    OHOS_BLE_DATA_COMPLETE = 0x00,
+    OHOS_BLE_DATA_INCOMPLETE_MORE_TO_COME = 0x01,
+    OHOS_BLE_DATA_INCOMPLETE_TRUNCATED = 0x02,
+} BleScanResultDataStatus;
+
+typedef enum {
+    OHOS_BLE_PUBLIC_DEVICE_ADDRESS = 0x00,
+    OHOS_BLE_RANDOM_DEVICE_ADDRESS = 0x01,
+    OHOS_BLE_PUBLIC_IDENTITY_ADDRESS = 0x02,
+    OHOS_BLE_RANDOM_STATIC_IDENTITY_ADDRESS = 0x03,
+    OHOS_BLE_UNRESOLVABLE_RANDOM_DEVICE_ADDRESS = 0xFE,
+    OHOS_BLE_NO_ADDRESS = 0xFF,
+} BleScanResultAddrType;
+
+typedef enum {
+    OHOS_BLE_SCAN_PHY_NO_PACKET = 0x00,
+    OHOS_BLE_SCAN_PHY_1M = 0x01,
+    OHOS_BLE_SCAN_PHY_2M = 0x02,
+    OHOS_BLE_SCAN_PHY_CODED = 0x03
+} BleScanResultPhyType;
+
+typedef struct {
+    int minInterval;
+    int maxInterval;
+    BleAdvType advType;
+    unsigned char ownAddrType;
+    unsigned char peerAddrType;
+    BdAddr peerAddr;
+    int channelMap;
+    BleAdvFilter advFilterPolicy;
+    int txPower;
+    int duration;
+} BleAdvParams;
+
+typedef struct {
+    unsigned short scanInterval;
+    unsigned short scanWindow;
+    unsigned char scanType;
+    unsigned char scanPhy;
+    unsigned char scanFilterPolicy;
+} BleScanParams;
+
+typedef struct {
+    unsigned char *advData;
+    unsigned int advDataLen;
+    unsigned char *rspData;
+    unsigned int rspDataLen;
+} StartAdvRawData;
+
+typedef struct {
+    unsigned char eventType;
+    unsigned char dataStatus;
+    unsigned char addrType;
+    BdAddr addr;
+    unsigned char primaryPhy;
+    unsigned char secondaryPhy;
+    unsigned char advSid;
+    char txPower;
+    char rssi;
+    unsigned short periodicAdvInterval;
+    unsigned char directAddrType;
+    BdAddr directAddr;
+    unsigned char advLen;
+    unsigned char *advData;
+} BtScanResultData;
+
+typedef void (*AdvEnableCallback)(int advId, int status);
+
+typedef void (*AdvDisableCallback)(int advId, int status);
+
+typedef void (*AdvDataCallback)(int advId, int status);
+
+typedef void (*AdvUpdateCallback)(int advId, int status);
+
+typedef void (*SecurityRespondCallback)(const BdAddr *bdAddr);
+
+typedef void (*ScanResultCallback)(BtScanResultData *scanResultdata);
+
+typedef void (*ScanParameterSetCompletedCallback)(int clientId, int status);
+
+typedef struct {
+    AdvEnableCallback advEnableCb;
+    AdvDisableCallback advDisableCb;
+    AdvDataCallback advDataCb;
+    AdvUpdateCallback advUpdateCb;
+    SecurityRespondCallback securityRespondCb;
+    ScanResultCallback scanResultCb;
+    ScanParameterSetCompletedCallback scanParamSetCb;
+} BtGattCallbacks;
+
+int BleStopAdv(int advId);
+int BleStartScan(void);
+int BleStopScan(void);
+int BleGattRegisterCallbacks(BtGattCallbacks *func);
+int BleStartAdvEx(int *advId, const StartAdvRawData rawData, BleAdvParams advParam);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
-- 
2.34.1

